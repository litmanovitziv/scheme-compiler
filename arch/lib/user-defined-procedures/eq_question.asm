
/* When comparing nil, void, boolean, pairs, vectors, strings, compare the two addresses*/

EQ_QUESTION_BODY:
	PUSH(FP);
	MOV(FP,SP);

	CMP(FPARG(1), IMM(2));
	JUMP_EQ(GOT_ENOUGH_ARGS_EQ_QUESTION);
	PUSH(FPARG(1));
	PUSH(IMM(1));
	CALL(THROW_WRONG_NUMBER_OF_ARGS);

GOT_ENOUGH_ARGS_EQ_QUESTION:

	PUSH(R1);
	PUSH(R2);
	MOV(R1,FPARG(2));
	MOV(R2,FPARG(3));
	
	CMP(IND(R1),IND(R2));
	JUMP_NE(ARENT_EQUAL);

	CMP(R1,T_CHAR);
	JUMP_EQ(CMP_BY_VALUE);
	
	CMP(R1,T_INTEGER);
	JUMP_EQ(CMP_BY_VALUE);
	
	CMP(R1,T_FRACTION);
	JUMP_EQ(CMP_BY_VALUE);

	CMP(R1,T_SYMBOL);
	JUMP_EQ(CMP_BY_VALUE);
	
	CMP(R1,T_NIL);
	JUMP_EQ(CMP_BY_ADDRESS);
	
	CMP(R1,T_VOID);
	JUMP_EQ(CMP_BY_ADDRESS);
	
	CMP(R1,T_BOOL);
	JUMP_EQ(CMP_BY_ADDRESS);

	CMP(R1,T_PAIR);
	JUMP_EQ(CMP_BY_ADDRESS);

	CMP(R1,T_VECTOR);
	JUMP_EQ(CMP_BY_ADDRESS);

	CMP(R1,T_STRING);
	JUMP_EQ(CMP_BY_ADDRESS);

CMP_BY_VALUE:
	CMP(INDD(R1,1),INDD(R2,1));
	JUMP_EQ(ARE_EQUAL);
	JUMP(ARENT_EQUAL);

CMP_BY_ADDRESS:
	CMP(R1,R2);
	JUMP_EQ(ARE_EQUAL);
	JUMP(ARENT_EQUAL);

ARE_EQUAL:
	MOV(R0,IMM(5));
	JUMP(EQUAL_FUNC_END);

ARENT_EQUAL:
	MOV(R0,IMM(3));

EQUAL_FUNC_END:
	POP(R2);	
	POP(R1);	
	MOV(SP,FP);
	POP(FP);
	RETURN;